version: "3.9"
services:
  frontend:
    container_name: frontend
    build:
      context: .
      dockerfile: frontend_dockerfile
    ports:
      - 8084:80
    networks:
      frontend:
  
  reverse_proxy:
    container_name: reverse_proxy
    build:
      context: .
      dockerfile: reverseproxy_dockerfile
    ports:
      - 8080:80
    networks:
      frontend:
        aliases:
          - apigateway
      backend:
  
  apigateway:
    container_name: apigateway
    build:
      context: .
      dockerfile: apigateway_dockerfile
    networks:
      backend:
  
  usermicroservice:
    container_name: usermicroservice
    build:
      context: .
      dockerfile: usermicroservice_dockerfile
    depends_on:
      usersdatabase:
        condition: service_healthy
    volumes:
      - ./images:/images
    networks:
      backend:
  
  postmicroservice:
    container_name: postmicroservice
    build:
      context: .
      dockerfile: postmicroservice_dockerfile
    depends_on:
      postsdatabase:
        condition: service_healthy
    command: []
    networks:
      backend:
  
  usersdatabase:
    container_name: usersdatabase
    build:
      context: .
      dockerfile: users_database_dockerfile
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    networks:
      backend:
  
  postsdatabase:
    container_name: postsdatabase
    build:
      context: .
      dockerfile: posts_database_dockerfile
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    networks:
      backend:

networks:
  frontend:
  backend: